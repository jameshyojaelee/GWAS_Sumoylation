p.value = x$p.value)
}
)
tt
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
}
)
tsum
ttest <- function(G){
ttest_df <- panc_in
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t.test(AUC ~ Hugo_Symbol, data = ttest_df)
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
}
)
return tsum
}
ttest <- function(G){
ttest_df <- panc_in
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t.test(AUC ~ Hugo_Symbol, data = ttest_df)
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
}
)
return(tsum)
}
result <- ttest("KRAS")
result[1]
ttest("KRAS")
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$mutated_mean <- NA
panc_below_avg_df$others_mean <- NA
panc_below_avg_df$p.value <- NA
for (i in nrow(panc_below_avg_df)) {
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean <- t[1]
panc_below_avg_df$others_mean <- t[2]
panc_below_avg_df$p.value <- t[3]
}
View(panc_below_avg_df)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$mutated_mean <- NA
panc_below_avg_df$others_mean <- NA
panc_below_avg_df$p.value <- NA
for (i in nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean <- t[1]
panc_below_avg_df$others_mean <- t[2]
panc_below_avg_df$p.value <- t[3]
}
nrow(panc_below_avg_df)
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean <- t[1]
panc_below_avg_df$others_mean <- t[2]
panc_below_avg_df$p.value <- t[3]
}
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean[i] <- t[1]
panc_below_avg_df$others_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- t[3]
}
ttest("KRAS")
write.csv(panc_below_avg_df, "Top 10 Mutation (pancreas)")
?write.csv
write.csv(panc_below_avg_df, "panc_mutation.csv")
write.csv(panc_below_avg_df, "panc_mutation.csv", col.names=FALSE)
write.csv(panc_below_avg_df, "panc_mutation.csv", col.names=TRUE)
write.csv(panc_below_avg_df, "panc_mutation.csv", row.names=FALSE)
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean[i] <- t[1]
panc_below_avg_df$others_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean[i] <- t[1]
panc_below_avg_df$others_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=4)
}
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$mutated_mean[i] <- t[1]
panc_below_avg_df$others_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
write.csv(panc_below_avg_df, "panc_mutation.csv", row.names=FALSE)
write.csv(panc_below_avg_df, "panc_mutation.csv", row.names=FALSE)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$Mut_AUC_mean <- NA
panc_below_avg_df$others_AUC_mean <- NA
panc_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
write.csv(panc_below_avg_df, "panc_mutation.csv", row.names=FALSE)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$Mut_AUC_mean <- NA
panc_below_avg_df$others_AUC_mean <- NA
panc_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i])
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
write.csv(panc_below_avg_df, "panc_mutation.csv", row.names=FALSE)
#common mutation with below average AUC value
below_avg_colo_AUC <- colo_in[colo_in$AUC < 400, ]
nrow(distinct(below_avg_colo_AUC, ccl))
#list the 10 most common mutations
colo_below_avg <- sort(table(below_avg_colo_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
colo_below_avg
#common mutation with below average AUC value
below_avg_colo_AUC <- colo_in[colo_in$AUC < 400, ]
nrow(distinct(below_avg_colo_AUC, ccl))
#list the 10 most common mutations
colo_below_avg <- sort(table(below_avg_colo_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
colo_below_avg
#common mutation with above average AUC value
above_avg_colo_AUC <- colo_in[colo_in$AUC >= 400, ]
nrow(distinct(above_avg_colo_AUC, ccl))
#list the 10 most common mutations
colo_above_avg <- sort(table(above_avg_colo_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
colo_above_avg
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
#create a function to repeat t-test for other genes
ttest <- function(G, df){
ttest_df <- df
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t.test(AUC ~ Hugo_Symbol, data = ttest_df)
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
ttest("KRAS", colo_in)
#create a function to repeat t-test for other genes
ttest <- function(G, df){
ttest_df <- panc_in
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t.test(AUC ~ Hugo_Symbol, data = ttest_df)
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
ttest("KRAS", panc_in)
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i], panc_in)
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
ttest("KRAS", panc_in)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$Mut_AUC_mean <- NA
panc_below_avg_df$others_AUC_mean <- NA
panc_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i], panc_in)
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_above_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
View(colo_below_avg_df)
colo_below_avg
View(colo_below_avg_df)
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
colo_below_avg_df$Mut_AUC_mean <- NA
colo_below_avg_df$others_AUC_mean <- NA
colo_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
t <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- t[1]
colo_below_avg_df$others_AUC_mean[i] <- t[2]
colo_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#create a function to repeat t-test for other genes
ttest <- function(G, df){
ttest_df <- df
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t.test(AUC ~ Hugo_Symbol, data = ttest_df)
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
ttest("KRAS", panc_in)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$Mut_AUC_mean <- NA
panc_below_avg_df$others_AUC_mean <- NA
panc_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i], panc_in)
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#use ttest function that we created during pancreas analysis
ttest("KRAS", colo_in)
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
colo_below_avg_df$Mut_AUC_mean <- NA
colo_below_avg_df$others_AUC_mean <- NA
colo_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
t <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- t[1]
colo_below_avg_df$others_AUC_mean[i] <- t[2]
colo_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
ttest_df <- colo_in
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != "TP53"] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == "TP53"] <- "Has Mut"
distinct(ttest_df, Hugo_Symbol)
#use ttest function that we created during pancreas analysis
ttest("KRAS", colo_in)
#create a function to repeat t-test for other genes
ttest <- function(G, df){
ttest_df <- df
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != G] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == G] <- "Has Mut"
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
ttest("KRAS", panc_in)
#use ttest function that we created during pancreas analysis
ttest("KRAS", colo_in)
colo_below_avg
colo_above_avg
#use ttest function that we created during pancreas analysis
ttest("TTN", colo_in)
#use ttest function that we created during pancreas analysis
ttest("DST", colo_in)
#use ttest function that we created during pancreas analysis
ttest("APC", colo_in)
#use ttest function that we created during pancreas analysis
ttest("FAT4", colo_in)
#use ttest function that we created during pancreas analysis
ttest("OBSCN", colo_in)
#use ttest function that we created during pancreas analysis
ttest("KIAA1109", colo_in)
#use ttest function that we created during pancreas analysis
ttest("LRP1", colo_in)
#use ttest function that we created during pancreas analysis
ttest("MYCBP2", colo_in)
#use ttest function that we created during pancreas analysis
ttest("PCLO", colo_in)
#use ttest function that we created during pancreas analysis
ttest("PKHD1L1", colo_in)
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
colo_below_avg_df$Mut_AUC_mean <- NA
colo_below_avg_df$others_AUC_mean <- NA
colo_below_avg_df$p.value <- NA
View(colo_in)
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
t <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- t[1]
colo_below_avg_df$others_AUC_mean[i] <- t[2]
colo_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#create a function to repeat t-test for other genes
ttest <- function(M, df){
ttest_df <- df
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != M] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == M] <- "Has Mut"
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
#for loop to fill in the dataframe
for (i in 1:10) {
print(colo_below_avg_df$mutation[i])
t <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- t[1]
colo_below_avg_df$others_AUC_mean[i] <- t[2]
colo_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i], panc_in)
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
#use ttest function that we created during pancreas analysis
ttest("TTN", colo_in)
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
tsum <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- tsum[1]
colo_below_avg_df$others_AUC_mean[i] <- tsum[2]
colo_below_avg_df$p.value[i] <- round(tsum[3], digits=3)
}
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_below_avg, stringsAsFactors=FALSE)
colnames(colo_below_avg_df) <- c('mutation', 'freq')
colo_below_avg_df$Mut_AUC_mean <- NA
colo_below_avg_df$others_AUC_mean <- NA
colo_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
tsum <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- tsum[1]
colo_below_avg_df$others_AUC_mean[i] <- tsum[2]
colo_below_avg_df$p.value[i] <- round(tsum[3], digits=3)
}
write.csv(colo_below_avg_df, "colo_mutation.csv", row.names=FALSE)
write.csv(panc_below_avg_df, "PANC_mutation.csv", row.names=FALSE)
write.csv(colo_below_avg_df, "COLO_mutation.csv", row.names=FALSE)
write.csv(colo_below_avg_df, "COLO_mutation.csv", row.names=FALSE)
write.csv(panc_below_avg_df, "PANC_mutation.csv", row.names=FALSE)
panc_below_avg_df
colo_below_avg_df
panc_below_avg_df
#common mutation with below average AUC value
below_avg_panc_AUC <- panc_in[panc_in$AUC < 400, ]
nrow(distinct(below_avg_panc_AUC, ccl))
#list the 10 most common mutations
panc_below_avg <- sort(table(below_avg_panc_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
panc_below_avg
#common mutation with above average AUC value
above_avg_panc_AUC <- panc_in[panc_in$AUC >= 400, ]
nrow(distinct(above_avg_panc_AUC, ccl))
#list the 10 most common mutations
panc_above_avg <- sort(table(above_avg_panc_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
panc_above_avg
# statistical significance of difference in AUC values between cells with that mutation and cells without the mutation
ttest_df <- panc_in
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != "TP53"] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == "TP53"] <- "Has Mut"
distinct(ttest_df, Hugo_Symbol)
#save t-test results as a list
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
#save p-value and means of the two groups
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
tsum
#create a function to repeat t-test for other genes
ttest <- function(M, df){
ttest_df <- df
ttest_df$Hugo_Symbol <- as.character(ttest_df$Hugo_Symbol)
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol != M] <- "Lacks Mut"
ttest_df$Hugo_Symbol[ttest_df$Hugo_Symbol == M] <- "Has Mut"
t <- list()
t[[1]] <- t.test(AUC ~ Hugo_Symbol, data = ttest_df)
tsum <- sapply(t, function(x) {
c(x$estimate[1],
x$estimate[2],
p.value = x$p.value)
})
return(tsum)
}
ttest("KRAS", panc_in)
#create dataframe with top 10 mutations (with below 400 AUC)
panc_below_avg_df <- as.data.frame(panc_below_avg, stringsAsFactors=FALSE)
colnames(panc_below_avg_df) <- c('mutation', 'freq')
panc_below_avg_df$Mut_AUC_mean <- NA
panc_below_avg_df$others_AUC_mean <- NA
panc_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(panc_below_avg_df)) {
print(panc_below_avg_df$mutation[i])
t <- ttest(panc_below_avg_df$mutation[i], panc_in)
panc_below_avg_df$Mut_AUC_mean[i] <- t[1]
panc_below_avg_df$others_AUC_mean[i] <- t[2]
panc_below_avg_df$p.value[i] <- round(t[3], digits=3)
}
write.csv(panc_below_avg_df, "PANC_mutation.csv", row.names=FALSE)
#common mutation with below average AUC value
below_avg_colo_AUC <- colo_in[colo_in$AUC < 400, ]
nrow(distinct(below_avg_colo_AUC, ccl))
#list the 10 most common mutations
colo_below_avg <- sort(table(below_avg_colo_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
colo_below_avg
#common mutation with above average AUC value
above_avg_colo_AUC <- colo_in[colo_in$AUC >= 400, ]
nrow(distinct(above_avg_colo_AUC, ccl))
#list the 10 most common mutations
colo_above_avg <- sort(table(above_avg_colo_AUC$Hugo_Symbol),decreasing=TRUE)[1:10]
colo_above_avg
#use ttest function that we created during pancreas analysis
ttest("TTN", colo_in)
#create dataframe with top 10 mutations (with below 400 AUC)
colo_below_avg_df <- as.data.frame(colo_below_avg, stringsAsFactors=FALSE)
colnames(colo_below_avg_df) <- c('mutation', 'freq')
colo_below_avg_df$Mut_AUC_mean <- NA
colo_below_avg_df$others_AUC_mean <- NA
colo_below_avg_df$p.value <- NA
#for loop to fill in the dataframe
for (i in 1:nrow(colo_below_avg_df)) {
print(colo_below_avg_df$mutation[i])
tsum <- ttest(colo_below_avg_df$mutation[i], colo_in)
colo_below_avg_df$Mut_AUC_mean[i] <- tsum[1]
colo_below_avg_df$others_AUC_mean[i] <- tsum[2]
colo_below_avg_df$p.value[i] <- round(tsum[3], digits=3)
}
write.csv(colo_below_avg_df, "COLO_mutation.csv", row.names=FALSE)
panc_below_avg_df
colo_below_avg_df
