assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
for (i in length(lineage)){
if(min(scores)!= Inf){
assign(all_enrich[i], enrichment(lineage[i]))
}
i <- i + 1
}
for (i in length(lineage)){
val <- enrichment(lineage[i])
if(min(scores)!= Inf){
assign(all_enrich[i], val)
}
i <- i + 1
}
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
if(scores == Inf){
scores == 0
}
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
lineage <- unique(UBA2_merged$lineage)
lineage <- as.list(lineage)
all_enrich <- list()
for (i in length(lineage)){
assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
if(is.null(scores) | scores == Inf){
scores == 0
}
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
lineage <- unique(UBA2_merged$lineage)
lineage <- as.list(lineage)
all_enrich <- list()
for (i in length(lineage)){
assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
if(is.null(scores)){
scores == 0
}
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
lineage <- unique(UBA2_merged$lineage)
lineage <- as.list(lineage)
all_enrich <- list()
for (i in length(lineage)){
assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
min(colorectal_scores)
class(colorectal_scores)
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores, na.rm=TRUE),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
lineage <- unique(UBA2_merged$lineage)
lineage <- as.list(lineage)
all_enrich <- list()
for (i in length(lineage)){
assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores, na.rm=TRUE),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
lineage <- unique(UBA2_merged$lineage)
lineage <- as.list(lineage)
all_enrich <- list()
for (i in length(lineage)){
assign(all_enrich[i], enrichment(lineage[i]))
i <- i + 1
}
#find the most frequent variant type
calculate_mode(colorectal_HUWE1$Variant_Classification)
########example with colorectal cells############################
colorectal_mutation <- gene_effect_mutation[which(gene_effect_mutation$lineage == "colorectal"), ]
#calculate the number of unique ccl
length(unique(colorectal_mutation$ccl))
#subset of colorectal cell lines with below threshold gene effect score
colorectal_valid_mut <- colorectal_mutation[which(colorectal_mutation$UBA2_gene_effect <= colorectal_average), ]
########example with colorectal cells############################
colorectal_mutation <- gene_effect_mutation[which(gene_effect_mutation$lineage == "colorectal"), ]
colnames(ccl_mut)[which(names(ccl_mut) == "DepMap_ID")] <- "ID"
ccl_mut <- subset(ccl_mut, select = c("ID", "Hugo_Symbol", "Variant_Classification"))
ccl_mut <- read.csv("CCLE_mutations.csv") #import mutation info
#read necessary csv files
setwd("/Users/james/Desktop/Gene KO/project")
ccl_mut <- read.csv("CCLE_mutations.csv") #import mutation info
colnames(ccl_mut)[which(names(ccl_mut) == "DepMap_ID")] <- "ID"
ccl_mut <- subset(ccl_mut, select = c("ID", "Hugo_Symbol", "Variant_Classification"))
#import the auc data to manipulate
gene_effect_mutation <- merge(x = UBA2_merged,
y = ccl_mut,
by = "ID")
#eliminate silent mutations
gene_effect_mutation <- gene_effect_mutation[which(gene_effect_mutation$Variant_Classification != "Silent"),]
#eliminate duplicated rows
gene_effect_mutation <- unique(gene_effect_mutation)
########example with colorectal cells############################
colorectal_mutation <- gene_effect_mutation[which(gene_effect_mutation$lineage == "colorectal"), ]
#calculate the number of unique ccl
length(unique(colorectal_mutation$ccl))
#calculate the mode (most frequent mutation)
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
library(dplyr)
library(devtools)
library("scales")
library(gridExtra)
#create subset with HUWE1_Missense
colorectal_HUWE1_Mis <- colorectal_HUWE1[which(colorectal_HUWE1$Variant_Classification == "Missense_Mutation"), ]
colorectal_HUWE1 <- droplevels(colorectal_HUWE1)
#eliminate silent mutations
gene_effect_mutation <- gene_effect_mutation[which(gene_effect_mutation$Variant_Classification != "Silent"),]
#eliminate duplicated rows
gene_effect_mutation <- unique(gene_effect_mutation)
########example with colorectal cells############################
colorectal_mutation <- gene_effect_mutation[which(gene_effect_mutation$lineage == "colorectal"), ]
#calculate the number of unique ccl
length(unique(colorectal_mutation$ccl))
#turns out to be 36 ccls
#subset of colorectal cell lines with below threshold gene effect score
colorectal_valid_mut <- colorectal_mutation[which(colorectal_mutation$UBA2_gene_effect <= colorectal_average), ]
colorectal_valid_mut <- droplevels(colorectal_valid_mut)
#subset of cell lines with above threshold
colorectal_invalid_mut <- colorectal_mutation[which(colorectal_mutation$UBA2_gene_effect > colorectal_average), ]
colorectal_invalid_mut <- droplevels(colorectal_invalid_mut)
#eliminate mutations that also occur in invalid
#colorectal_valid_mut1 <- colorectal_valid_mut[!duplicated(colorectal_invalid_mut[c('Hugo_Symbol', 'Variant_Classification')]),]
colorectal_mut_final <- anti_join(colorectal_valid_mut, colorectal_invalid_mut,
by=c("Hugo_Symbol", "Variant_Classification"), copy = TRUE)
#calculate the mode (most frequent mutation)
calculate_mode <- function(x) {
uniqx <- unique(na.omit(x))
uniqx[which.max(tabulate(match(x, uniqx)))]
}
calculate_mode(colorectal_mut_final$Hugo_Symbol)
#turns out to be HUWE1
colorectal_HUWE1 <- colorectal_mut_final[which(colorectal_mut_final$Hugo_Symbol == "HUWE1"), ]
#find the most frequent variant type
calculate_mode(colorectal_HUWE1$Variant_Classification)
#turns out to be Missense_Mutation
#create subset with HUWE1_Missense
colorectal_HUWE1_Mis <- colorectal_HUWE1[which(colorectal_HUWE1$Variant_Classification == "Missense_Mutation"), ]
colorectal_HUWE1 <- droplevels(colorectal_HUWE1)
#7 cell lines with HUWE1 Missense mutation
colorectal_HUWE1_Mis <-droplevels(colorectal_HUWE1_Mis)
y <- length(colorectal_HUWE1_Mis$ID)
y
x <- length(colorectal$ccl)
x <- x - y
#find the most frequent variant type
class(calculate_mode(colorectal_HUWE1$Variant_Classification))
colorectal_mutation$ccl
length(colorectal_mutation$ccl)
length(unique(colorectal_mutation$ccl))
#calculate the number of unique ccl
length(unique(colorectal_mutation$ccl))
colorectal_HUWE1_Mis
View(colorectal_HUWE1_Mis)
y <- length(colorectal_HUWE1_Mis)
y
y <- length(colorectal_HUWE1_Mis$ID)
y
y <- length(colorectal_HUWE1_Mis$ccl)
y
mutation_analysis <- function(cell_line){
mut <- gene_effect_mutation[which(gene_effect_mutation$lineage == cell_line), ]
#subset of colorectal cell lines with below threshold gene effect score
valid_mut <- mut[which(mut$UBA2_gene_effect <= colorectal_average), ]
valid_mut <- droplevels(valid_mut)
#subset of cell lines with above threshold
invalid_mut <- mut[which(mut$UBA2_gene_effect > colorectal_average), ]
invalid_mut <- droplevels(invalid_mut)
#eliminate mutations that also occur in invalid
#colorectal_valid_mut1 <- valid_mut[!duplicated(invalid_mut[c('Hugo_Symbol', 'Variant_Classification')]),]
mut_final <- anti_join(valid_mut, invalid_mut,
by=c("Hugo_Symbol", "Variant_Classification"), copy = TRUE)
#calculate the mode (most frequent mutation)
mutated_gene <- calculate_mode(mut_final$Hugo_Symbol)
#info with the mutated_gene above
mut_mutated_gene <- mut_final[which(mut_final$Hugo_Symbol == mutated_gene), ]
#find the most frequent variant type
variant <- calculate_mode(mut_mutated_gene$Variant_Classification)
#create subset with the specific variant
mut_mutated_gene_Mis <- mut_mutated_gene[which(mut_mutated_gene$Variant_Classification == variant), ]
mut_mutated_gene <- droplevels(mut_mutated_gene)
#7 cell lines with HUWE1 Missense mutation
y <- length(mut_mutated_gene_Mis$ccl)
x <- length(unique(mut$ccl))
x <- x - y
final_table <- data.frame(mutation = c(as.character(variant), "other"), counts = c(y, x))
bar_title <- paste("Mut:", as.character(mutated_gene), as.character(variant),
"Mutation \n", y, "overlaps out of", x, "total")
bar <- ggplot(data = final_table, aes(x= mutation, y=counts)) +
ggtitle(bar_title) +
geom_bar(stat="identity", fill = "white", colour = "black")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
}
mutation_analysis(colorectal)
mutation_analysis <- function(cell_line){
mut <- gene_effect_mutation[which(gene_effect_mutation$lineage == cell_line), ]
#subset of colorectal cell lines with below threshold gene effect score
valid_mut <- mut[which(mut$UBA2_gene_effect <= colorectal_average), ]
valid_mut <- droplevels(valid_mut)
#subset of cell lines with above threshold
invalid_mut <- mut[which(mut$UBA2_gene_effect > colorectal_average), ]
invalid_mut <- droplevels(invalid_mut)
#eliminate mutations that also occur in invalid
#colorectal_valid_mut1 <- valid_mut[!duplicated(invalid_mut[c('Hugo_Symbol', 'Variant_Classification')]),]
mut_final <- anti_join(valid_mut, invalid_mut,
by=c("Hugo_Symbol", "Variant_Classification"), copy = TRUE)
#calculate the mode (most frequent mutation)
mutated_gene <- calculate_mode(mut_final$Hugo_Symbol)
#info with the mutated_gene above
mut_mutated_gene <- mut_final[which(mut_final$Hugo_Symbol == mutated_gene), ]
#find the most frequent variant type
variant <- calculate_mode(mut_mutated_gene$Variant_Classification)
#create subset with the specific variant
mut_mutated_gene_Mis <- mut_mutated_gene[which(mut_mutated_gene$Variant_Classification == variant), ]
mut_mutated_gene <- droplevels(mut_mutated_gene)
#7 cell lines with HUWE1 Missense mutation
y <- length(mut_mutated_gene_Mis$ccl)
x <- length(unique(mut$ccl))
x <- x - y
final_table <- data.frame(mutation = c(as.character(variant), "other"), counts = c(y, x))
bar_title <- paste("Mut:", as.character(mutated_gene), as.character(variant),
"Mutation \n", y, "overlaps out of", x, "total")
bar <- ggplot(data = final_table, aes(x= mutation, y=counts)) +
ggtitle(bar_title) +
geom_bar(stat="identity", fill = "white", colour = "black")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
return (bar)
}
mutation_analysis(colorectal)
mutation_analysis("colorectal")
#subset of all ccl
colorectal_ccl <- distinct(colorectal_mutation, ccl, .keep_all= TRUE )
colorectal_ccl[match(colorectal_HUWE1$ID, colorectal_ccl$ID), ] <- colorectal_HUWE1
colorectal_ccl$Hugo_Symbol <- as.character(colorectal_ccl$Hugo_Symbol)
colorectal_ccl$Hugo_Symbol[colorectal_ccl$Hugo_Symbol == "HUWE1"] <- "has Mut"
colorectal_ccl$Hugo_Symbol[colorectal_ccl$Hugo_Symbol != "has Mut"] <- "lacks Mut"
t <- t.test(UBA2_gene_effect ~ Hugo_Symbol, data =colorectal_ccl)
box_title <- paste("UBA2 gene effect \n", "T-test p-value =", round(t$p.value, digits = 4))
box <- ggplot(colorectal_ccl, aes(x= Hugo_Symbol, y=UBA2_gene_effect)) +
ggtitle(box_title) +
geom_boxplot(fill = "white", colour = "black", outlier.colour = "red")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
box
enrichment <- function(cell_line){
x <- UBA2_merged[which(UBA2_merged$lineage == cell_line),]
x <- x[order(x$UBA2_gene_effect), ]
scores <-x$UBA2_gene_effect
average <- mean(colorectal_scores)
sdev <- sd(colorectal_scores)
enrich_title <- paste("UBA2 gene effect in", x$lineage ,"cancer cells \n (",
length(which(x$UBA2_gene_effect < average)),
"cell lines out of ",length(x$UBA2_gene_effect)," with UBA2 score <" ,
round(average, digits = 3), ")")
enrich <- ggplot(data = x , aes(x = UBA2_gene_effect, y = lineage, width= 0.05)) +
ggtitle(enrich_title) +
geom_tile(aes(fill = UBA2_gene_effect)) +
scale_fill_gradientn(colours = c("red","white","white","white"),
guide = "colorbar", limits=c(min(scores, na.rm=TRUE),0)) +
scale_x_continuous(limits=c(min(scores),0))+
theme_bw()  + theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
return (enrich)
}
enrichment(colorectal)
enrichment("colorectal")
mutation_analysis <- function(cell_line){
mut <- gene_effect_mutation[which(gene_effect_mutation$lineage == cell_line), ]
#subset of colorectal cell lines with below threshold gene effect score
valid_mut <- mut[which(mut$UBA2_gene_effect <= colorectal_average), ]
valid_mut <- droplevels(valid_mut)
#subset of cell lines with above threshold
invalid_mut <- mut[which(mut$UBA2_gene_effect > colorectal_average), ]
invalid_mut <- droplevels(invalid_mut)
#eliminate mutations that also occur in invalid
#colorectal_valid_mut1 <- valid_mut[!duplicated(invalid_mut[c('Hugo_Symbol', 'Variant_Classification')]),]
mut_final <- anti_join(valid_mut, invalid_mut,
by=c("Hugo_Symbol", "Variant_Classification"), copy = TRUE)
#calculate the mode (most frequent mutation)
mutated_gene <- calculate_mode(mut_final$Hugo_Symbol)
#info with the mutated_gene above
mut_mutated_gene <- mut_final[which(mut_final$Hugo_Symbol == mutated_gene), ]
#find the most frequent variant type
variant <- calculate_mode(mut_mutated_gene$Variant_Classification)
#create subset with the specific variant
mut_mutated_gene_Mis <- mut_mutated_gene[which(mut_mutated_gene$Variant_Classification == variant), ]
mut_mutated_gene <- droplevels(mut_mutated_gene)
#7 cell lines with HUWE1 Missense mutation
y <- length(mut_mutated_gene_Mis$ccl)
x <- length(unique(mut$ccl))
x <- x - y
final_table <- data.frame(mutation = c(as.character(variant), "other"), counts = c(y, x))
bar_title <- paste("Mut:", as.character(mutated_gene), as.character(variant),
"Mutation \n", y, "overlaps out of", x, "total")
bar <- ggplot(data = final_table, aes(x= mutation, y=counts)) +
ggtitle(bar_title) +
geom_bar(stat="identity", fill = "white", colour = "black")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
##### Statistical analysis part
ccl <- distinct(mut, mut$ccl, .keep_all= TRUE )
ccl[match(mut_mutated_gene$ID, ccl$ID), ] <- mut_mutated_gene
ccl$Hugo_Symbol <- as.character(ccl$Hugo_Symbol)
ccl$Hugo_Symbol[ccl$Hugo_Symbol == "HUWE1"] <- "has Mut"
ccl$Hugo_Symbol[ccl$Hugo_Symbol != "has Mut"] <- "lacks Mut"
t <- t.test(UBA2_gene_effect ~ Hugo_Symbol, data =ccl)
box_title <- paste("UBA2 gene effect \n", "T-test p-value =", round(t$p.value, digits = 4))
box <- ggplot(ccl, aes(x= Hugo_Symbol, y=UBA2_gene_effect)) +
ggtitle(box_title) +
geom_boxplot(fill = "white", colour = "black", outlier.colour = "red")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
final_analysis <- grid.arrange(grobs= list(enrich, bar, box),
layout_matrix = rbind(c(1, 1), c(1, 1), c(2, 3), c(2, 3), c(2, 3)))
return (final_analysis)
}
#must type in argument as a string (wrapped with "")
mutation_analysis("colorectal")
#must type in argument as a string (wrapped with "")
mutation_analysis("eye")
#must type in argument as a string (wrapped with "")
mutation_analysis("uterus")
View(t)
enrichment("uterus")
#must type in argument as a string (wrapped with "")
mutation_analysis("uterus")
mutation_analysis <- function(cell_line){
mut <- gene_effect_mutation[which(gene_effect_mutation$lineage == cell_line), ]
#subset of colorectal cell lines with below threshold gene effect score
valid_mut <- mut[which(mut$UBA2_gene_effect <= colorectal_average), ]
valid_mut <- droplevels(valid_mut)
#subset of cell lines with above threshold
invalid_mut <- mut[which(mut$UBA2_gene_effect > colorectal_average), ]
invalid_mut <- droplevels(invalid_mut)
#eliminate mutations that also occur in invalid
#colorectal_valid_mut1 <- valid_mut[!duplicated(invalid_mut[c('Hugo_Symbol', 'Variant_Classification')]),]
mut_final <- anti_join(valid_mut, invalid_mut,
by=c("Hugo_Symbol", "Variant_Classification"), copy = TRUE)
#calculate the mode (most frequent mutation)
mutated_gene <- calculate_mode(mut_final$Hugo_Symbol)
#info with the mutated_gene above
mut_mutated_gene <- mut_final[which(mut_final$Hugo_Symbol == mutated_gene), ]
#find the most frequent variant type
variant <- calculate_mode(mut_mutated_gene$Variant_Classification)
#create subset with the specific variant
mut_mutated_gene_Mis <- mut_mutated_gene[which(mut_mutated_gene$Variant_Classification == variant), ]
mut_mutated_gene <- droplevels(mut_mutated_gene)
#7 cell lines with HUWE1 Missense mutation
y <- length(mut_mutated_gene_Mis$ccl)
x <- length(unique(mut$ccl))
x <- x - y
final_table <- data.frame(mutation = c(as.character(variant), "other"), counts = c(y, x))
bar_title <- paste("Mut:", as.character(mutated_gene), as.character(variant),
"Mutation \n", y, "overlaps out of", x, "total")
bar <- ggplot(data = final_table, aes(x= mutation, y=counts)) +
ggtitle(bar_title) +
geom_bar(stat="identity", fill = "white", colour = "black")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
##### Statistical analysis part
ccl <- distinct(mut, mut$ccl, .keep_all= TRUE )
ccl[match(mut_mutated_gene$ID, ccl$ID), ] <- mut_mutated_gene
ccl$Hugo_Symbol <- as.character(ccl$Hugo_Symbol)
ccl$Hugo_Symbol[ccl$Hugo_Symbol == "HUWE1"] <- "has Mut"
ccl$Hugo_Symbol[ccl$Hugo_Symbol != "has Mut"] <- "lacks Mut"
t <- t.test(UBA2_gene_effect ~ Hugo_Symbol, data = ccl)
box_title <- paste("UBA2 gene effect \n", "T-test p-value =", round(t$p.value, digits = 4))
box <- ggplot(ccl, aes(x= Hugo_Symbol, y=UBA2_gene_effect)) +
ggtitle(box_title) +
geom_boxplot(fill = "white", colour = "black", outlier.colour = "red")+
theme(plot.title = element_text(size=14, hjust = 0.5, face = "bold"),
panel.background = element_rect(fill = "lightgrey", colour = "lightgrey",
size = 2, linetype = "solid"))
#arrange all 3 plots from (a), (b), and (c)
final_analysis <- grid.arrange(grobs= list(enrich, bar, box),
layout_matrix = rbind(c(1, 1), c(1, 1), c(2, 3), c(2, 3), c(2, 3)))
return (final_analysis)
}
#must type in argument as a string (wrapped with "")
mutation_analysis("uterus")
#must type in argument as a string (wrapped with "")
mutation_analysis("uterus")
